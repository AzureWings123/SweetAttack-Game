//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Scripts/Player/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""live controls"",
            ""id"": ""b415a285-5341-4103-8608-e37b145cb2ec"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5b34c2a1-8b28-4111-87d6-6f4fc819938e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""attack"",
                    ""type"": ""Button"",
                    ""id"": ""bcd6878f-ad6f-4e3e-ade0-d44f75b52ea0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""chspell"",
                    ""type"": ""Button"",
                    ""id"": ""d556cb97-8a71-49bd-bab6-eb78444d4931"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""dcbdc2ad-d1f5-4449-9bff-53044f6a2f0b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""pause"",
                    ""type"": ""Button"",
                    ""id"": ""6e2ec68c-d564-42ee-bbb8-31381527f286"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""1ff4556a-4b6c-4853-bfdf-a4b16b24a175"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5f74828a-69f1-4444-b648-06678b9a2701"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ce1c6b46-3bbc-457e-b82d-1283421612cb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ce922f8a-e401-435d-a021-6e318db92bb8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a78111ea-8c24-45c4-9401-a765c9cc577c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""id"": ""fe1de459-23d3-4b1f-9fef-a78d37abcf1f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6144a5ce-4651-469c-8616-c5c3e855f3cf"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""02f21f59-3ab4-48e0-b1d1-35fcc7f28a59"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2609d8c7-26fe-463f-851d-ef8fa22cb09e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dea5ea61-ae27-470d-8ab9-fb7ff112ba93"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""44289583-daf1-4845-bcf6-fda588aac54d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eeb7b2b1-e5d5-4ed6-80ad-81afa8cef321"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""chspell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f334d117-5ea7-47c6-92e3-ac54d1e88437"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""274c4f92-fb4b-446c-b3f9-91229544ecb3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // live controls
        m_livecontrols = asset.FindActionMap("live controls", throwIfNotFound: true);
        m_livecontrols_Move = m_livecontrols.FindAction("Move", throwIfNotFound: true);
        m_livecontrols_attack = m_livecontrols.FindAction("attack", throwIfNotFound: true);
        m_livecontrols_chspell = m_livecontrols.FindAction("chspell", throwIfNotFound: true);
        m_livecontrols_Look = m_livecontrols.FindAction("Look", throwIfNotFound: true);
        m_livecontrols_pause = m_livecontrols.FindAction("pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // live controls
    private readonly InputActionMap m_livecontrols;
    private ILivecontrolsActions m_LivecontrolsActionsCallbackInterface;
    private readonly InputAction m_livecontrols_Move;
    private readonly InputAction m_livecontrols_attack;
    private readonly InputAction m_livecontrols_chspell;
    private readonly InputAction m_livecontrols_Look;
    private readonly InputAction m_livecontrols_pause;
    public struct LivecontrolsActions
    {
        private @PlayerControls m_Wrapper;
        public LivecontrolsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_livecontrols_Move;
        public InputAction @attack => m_Wrapper.m_livecontrols_attack;
        public InputAction @chspell => m_Wrapper.m_livecontrols_chspell;
        public InputAction @Look => m_Wrapper.m_livecontrols_Look;
        public InputAction @pause => m_Wrapper.m_livecontrols_pause;
        public InputActionMap Get() { return m_Wrapper.m_livecontrols; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LivecontrolsActions set) { return set.Get(); }
        public void SetCallbacks(ILivecontrolsActions instance)
        {
            if (m_Wrapper.m_LivecontrolsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnMove;
                @attack.started -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnAttack;
                @attack.performed -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnAttack;
                @attack.canceled -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnAttack;
                @chspell.started -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnChspell;
                @chspell.performed -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnChspell;
                @chspell.canceled -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnChspell;
                @Look.started -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnLook;
                @pause.started -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnPause;
                @pause.performed -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnPause;
                @pause.canceled -= m_Wrapper.m_LivecontrolsActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_LivecontrolsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @attack.started += instance.OnAttack;
                @attack.performed += instance.OnAttack;
                @attack.canceled += instance.OnAttack;
                @chspell.started += instance.OnChspell;
                @chspell.performed += instance.OnChspell;
                @chspell.canceled += instance.OnChspell;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @pause.started += instance.OnPause;
                @pause.performed += instance.OnPause;
                @pause.canceled += instance.OnPause;
            }
        }
    }
    public LivecontrolsActions @livecontrols => new LivecontrolsActions(this);
    public interface ILivecontrolsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnChspell(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
